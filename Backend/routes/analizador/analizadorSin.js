/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizadorSin = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,18],$V2=[1,20],$V3=[1,30],$V4=[1,23],$V5=[1,22],$V6=[1,21],$V7=[1,24],$V8=[1,28],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,29],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[5,24,33,36,42,65,71,72,73,75,76,77,78,79,93,94,95,96,97],$Vj=[1,40],$Vk=[1,42],$Vl=[1,45],$Vm=[1,47],$Vn=[1,43],$Vo=[1,44],$Vp=[1,46],$Vq=[1,58],$Vr=[1,56],$Vs=[1,57],$Vt=[1,55],$Vu=[1,59],$Vv=[1,60],$Vw=[1,61],$Vx=[1,62],$Vy=[1,63],$Vz=[1,64],$VA=[24,27,35],$VB=[1,72],$VC=[1,71],$VD=[5,24,32,33,36,42,65,68,70,71,72,73,75,76,77,78,79,93,94,95,96,97],$VE=[1,116],$VF=[1,118],$VG=[1,107],$VH=[1,108],$VI=[1,109],$VJ=[1,110],$VK=[1,111],$VL=[1,112],$VM=[1,113],$VN=[1,114],$VO=[1,115],$VP=[1,117],$VQ=[1,119],$VR=[1,120],$VS=[20,28,32,34,35,38,43,44,45,46,47,48,49,50,51,52,53,54,55,69],$VT=[5,24,32,33,36,37,42,45,56,59,60,61,62,63,64,65,68,70,71,72,73,75,76,77,78,79,93,94,95,96,97],$VU=[1,141],$VV=[32,38,43],$VW=[24,32,33,36,65,68,70,71,72,73,75,76,77,78,79,93,94,95,96,97],$VX=[20,28,32,38,43,50,51,69],$VY=[1,175],$VZ=[20,28,32,34,35,38,43,44,45,50,51,52,53,54,55,69],$V_=[20,28,32,34,35,38,43,44,45,46,47,48,50,51,52,53,54,55,69],$V$=[20,28,32,34,35,38,43,50,51,52,53,54,55,69],$V01=[38,43],$V11=[1,212],$V21=[1,263],$V31=[5,24,32,33,36,39,42,65,68,70,71,72,73,75,76,77,78,79,93,94,95,96,97],$V41=[32,68,70];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"PRINCIPAL":4,"EOF":5,"CUERPO":6,"DECLARACION":7,"ASIGNACION":8,"IF":9,"WHILE":10,"DOWHILE":11,"SWITCH":12,"FOR":13,"FUNCION":14,"TRANSFERENCIA":15,"METODOS":16,"PRINT":17,"EJECUTAR":18,"LLAMADA":19,"pcoma":20,"INSTRUCCIONES":21,"INSTRUCCION":22,"TIPO":23,"identificador":24,"igual":25,"EXPRESION":26,"corchetea":27,"corchetec":28,"new":29,"llavea":30,"LISTAVALORES":31,"llavec":32,"list":33,"menor":34,"mayor":35,"if":36,"parentesisa":37,"parentisisc":38,"else":39,"ELSEIF":40,"CONELSEIF":41,"exec":42,"coma":43,"mas":44,"menos":45,"mult":46,"division":47,"mod":48,"potencia":49,"or":50,"and":51,"igualacion":52,"menorigual":53,"mayorigual":54,"diferente":55,"not":56,"aumento":57,"decremento":58,"cadena":59,"decimal":60,"entero":61,"caracter":62,"true":63,"false":64,"switch":65,"CASE":66,"DEFAULT":67,"case":68,"dpuntos":69,"default":70,"do":71,"while":72,"for":73,"PARAMETROS":74,"void":75,"break":76,"continue":77,"return":78,"print":79,"TERNARIO":80,"interrogacion":81,"punto":82,"add":83,"OTRAS_FUNCIONES":84,"tolower":85,"toupper":86,"length":87,"truncate":88,"round":89,"typeof":90,"tostring":91,"tochararray":92,"int":93,"double":94,"boolean":95,"char":96,"string":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"pcoma",24:"identificador",25:"igual",27:"corchetea",28:"corchetec",29:"new",30:"llavea",32:"llavec",33:"list",34:"menor",35:"mayor",36:"if",37:"parentesisa",38:"parentisisc",39:"else",42:"exec",43:"coma",44:"mas",45:"menos",46:"mult",47:"division",48:"mod",49:"potencia",50:"or",51:"and",52:"igualacion",53:"menorigual",54:"mayorigual",55:"diferente",56:"not",57:"aumento",58:"decremento",59:"cadena",60:"decimal",61:"entero",62:"caracter",63:"true",64:"false",65:"switch",68:"case",69:"dpuntos",70:"default",71:"do",72:"while",73:"for",75:"void",76:"break",77:"continue",78:"return",79:"print",81:"interrogacion",82:"punto",83:"add",85:"tolower",86:"toupper",87:"length",88:"truncate",89:"round",90:"typeof",91:"tostring",92:"tochararray",93:"int",94:"double",95:"boolean",96:"char",97:"string"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[21,2],[21,1],[22,2],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[7,5],[7,3],[7,11],[7,9],[7,12],[9,7],[9,11],[9,8],[9,12],[40,2],[40,1],[41,8],[18,5],[18,6],[19,3],[19,4],[31,3],[31,1],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,3],[26,2],[26,1],[26,2],[26,2],[26,4],[26,6],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[12,8],[12,7],[12,7],[66,4],[66,5],[66,4],[67,3],[11,8],[10,7],[13,10],[13,10],[14,8],[14,7],[16,8],[16,7],[15,2],[15,2],[15,2],[15,3],[74,4],[74,2],[17,5],[80,6],[8,4],[8,3],[8,3],[8,7],[8,7],[8,9],[84,4],[84,4],[84,4],[84,4],[84,4],[84,4],[84,4],[84,4],[23,1],[23,1],[23,1],[23,1],[23,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,23:17,24:$V0,33:$V1,36:$V2,42:$V3,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{1:[3]},{5:[1,36],6:37,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,23:17,24:$V0,33:$V1,36:$V2,42:$V3,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),{20:[1,38]},{24:[1,39],27:$Vj},{34:[1,41]},{25:$Vk,27:$Vl,37:$Vm,57:$Vn,58:$Vo,82:$Vp},{37:[1,48]},{37:[1,49]},{30:[1,50]},{37:[1,51]},{37:[1,52]},{19:65,20:[1,53],24:$Vq,26:54,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{20:[1,66]},{20:[1,67]},{24:[1,68]},{37:[1,69]},{24:[1,70]},o($VA,[2,115]),o($VA,[2,116]),o($VA,[2,117]),o($VA,[2,118]),o($VA,[2,119]),{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,16]),{20:$VB,25:$VC,37:[1,73]},{28:[1,74]},{23:75,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{19:65,24:$Vq,26:76,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{20:[1,77]},{20:[1,78]},{19:65,24:$Vq,26:79,27:[1,80],37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{83:[1,81]},{19:65,24:$Vq,26:84,31:83,37:$Vr,38:[1,82],45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{19:65,24:$Vq,26:85,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{19:65,24:$Vq,26:86,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,21:87,22:88,23:17,24:$V0,33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{19:65,24:$Vq,26:101,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{7:102,8:103,23:104,24:[1,105],33:$V1,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},o($VD,[2,93]),{20:[1,106],34:$VE,35:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},{19:65,24:$Vq,26:121,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{19:65,24:$Vq,26:122,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{19:65,24:$Vq,26:123,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},o($VS,[2,66],{27:[1,126],37:$Vm,57:[1,124],58:[1,125]}),o($VS,[2,71]),o($VS,[2,72]),o($VS,[2,73]),o($VS,[2,74]),o($VS,[2,75]),o($VS,[2,76]),o($VS,[2,77]),o($VD,[2,94]),o($VD,[2,95]),{37:[1,127]},{19:65,24:$Vq,26:128,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{37:[1,129]},{19:65,24:$Vq,26:130,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},o($VT,[2,32]),{23:133,38:[1,132],74:131,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{24:[1,134]},{35:[1,135]},{20:[1,136],34:$VE,35:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},o($VT,[2,102]),o($VT,[2,103]),{28:[1,137],34:$VE,35:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},{19:65,24:$Vq,26:138,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{37:[1,139]},o($VS,[2,45]),{38:[1,140],43:$VU},o($VV,[2,48],{34:$VE,35:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR}),{34:$VE,35:$VF,38:[1,142],44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},{34:$VE,35:$VF,38:[1,143],44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,22:145,23:17,24:$V0,32:[1,144],33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},o($VW,[2,18]),{20:[1,146]},o($VW,[2,20]),o($VW,[2,21]),o($VW,[2,22]),o($VW,[2,23]),o($VW,[2,24]),o($VW,[2,25]),o($VW,[2,26]),o($VW,[2,27]),o($VW,[2,28]),o($VW,[2,29]),o($VW,[2,30]),{34:$VE,35:$VF,38:[1,147],44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},{19:65,24:$Vq,26:148,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{19:65,24:$Vq,26:149,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{24:[1,150],27:$Vj},{25:$Vk,27:$Vl,57:$Vn,58:$Vo,82:$Vp},o($VD,[2,96]),{19:65,24:$Vq,26:151,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{19:65,24:$Vq,26:152,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{19:65,24:$Vq,26:153,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{19:65,24:$Vq,26:154,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{19:65,24:$Vq,26:155,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{19:65,24:$Vq,26:156,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{19:65,24:$Vq,26:157,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{19:65,24:$Vq,26:158,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{19:65,24:$Vq,26:159,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{19:65,24:$Vq,26:160,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{19:65,24:$Vq,26:161,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{19:65,24:$Vq,26:162,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{19:65,24:$Vq,26:163,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{19:65,24:$Vq,26:164,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},o($VX,[2,63],{34:$VE,35:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,52:$VO,53:$VP,54:$VQ,55:$VR}),{34:$VE,35:$VF,38:[1,165],44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},o($VS,[2,65]),o($VS,[2,67]),o($VS,[2,68]),{19:65,24:$Vq,26:166,27:[1,167],37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{23:133,38:[1,169],74:168,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{34:$VE,35:$VF,38:[1,170],44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},{19:65,24:$Vq,26:84,31:172,37:$Vr,38:[1,171],45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{20:[1,173],34:$VE,35:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},{38:[1,174],43:$VY},{30:[1,176]},{24:[1,177]},{25:[1,178]},{24:[1,179]},o($VT,[2,101]),{25:[1,180]},{28:[1,181],34:$VE,35:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},{19:65,24:$Vq,26:182,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},o($VS,[2,46]),{19:65,24:$Vq,26:183,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{30:[1,184]},{30:[1,185]},{72:[1,186]},o($VW,[2,17]),o($VW,[2,19]),{30:[1,187]},{20:[1,188],34:$VE,35:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},{20:[1,189],34:$VE,35:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},{20:$VB,25:$VC},o($VZ,[2,49],{46:$VI,47:$VJ,48:$VK,49:$VL}),o($VZ,[2,50],{46:$VI,47:$VJ,48:$VK,49:$VL}),o($V_,[2,51],{49:$VL}),o($V_,[2,52],{49:$VL}),o($V_,[2,53],{49:$VL}),o($VS,[2,54]),o([20,28,32,38,43,50,69],[2,55],{34:$VE,35:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR}),o($VX,[2,56],{34:$VE,35:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,52:$VO,53:$VP,54:$VQ,55:$VR}),o($V$,[2,57],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL}),o($V$,[2,58],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL}),o($V$,[2,59],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL}),o($V$,[2,60],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL}),o($V$,[2,61],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL}),o($V$,[2,62],{44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL}),o($VS,[2,64]),{28:[1,190],34:$VE,35:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},{19:65,24:$Vq,26:191,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{38:[1,192],43:$VY},{30:[1,193]},{20:[1,194]},{20:[1,195]},{38:[1,196],43:$VU},o($VT,[2,31]),{30:[1,197]},{23:198,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,21:199,22:88,23:17,24:$V0,33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},o($V01,[2,98]),{29:[1,200],30:[1,201]},{25:[1,202]},{19:65,24:$Vq,26:203,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{28:[1,204]},{34:$VE,35:$VF,38:[1,205],44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},o($VV,[2,47],{34:$VE,35:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR}),{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,21:206,22:88,23:17,24:$V0,33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,21:207,22:88,23:17,24:$V0,33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{37:[1,208]},{66:209,67:210,68:[1,211],70:$V11},{19:65,24:$Vq,26:213,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{19:65,24:$Vq,26:214,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},o($VS,[2,69]),{28:[1,215],34:$VE,35:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},{30:[1,216]},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,21:217,22:88,23:17,24:$V0,33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},o($VD,[2,99]),o($Vi,[2,43]),{20:[1,218]},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,21:219,22:88,23:17,24:$V0,33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{24:[1,220]},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,22:145,23:17,24:$V0,32:[1,221],33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{23:222,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{19:65,24:$Vq,26:84,31:223,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{29:[1,224]},{20:[1,225],34:$VE,35:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},{25:[1,226]},{20:[1,227]},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,22:145,23:17,24:$V0,32:[1,228],33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,22:145,23:17,24:$V0,32:[1,229],33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{19:65,24:$Vq,26:230,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{32:[1,232],67:231,68:[1,233],70:$V11},{32:[1,234]},{19:65,24:$Vq,26:235,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{69:[1,236]},{34:$VE,35:$VF,38:[1,237],44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},{34:$VE,35:$VF,38:[1,238],44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},{28:[1,239]},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,21:240,22:88,23:17,24:$V0,33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,22:145,23:17,24:$V0,32:[1,241],33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},o($Vi,[2,44]),{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,22:145,23:17,24:$V0,32:[1,242],33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},o($V01,[2,97]),o($VD,[2,90]),{27:[1,243]},{32:[1,244],43:$VU},{33:[1,245]},o($VT,[2,104]),{19:65,24:$Vq,26:246,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},o($VT,[2,105]),o($VD,[2,36],{40:248,41:249,39:[1,247]}),o($VD,[2,86]),{34:$VE,35:$VF,38:[1,250],44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},{32:[1,251]},o($VD,[2,79]),{19:65,24:$Vq,26:252,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},o($VD,[2,80]),{34:$VE,35:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR,69:[1,253]},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,21:254,22:88,23:17,24:$V0,33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{30:[1,255]},{30:[1,256]},o($VS,[2,70]),{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,22:145,23:17,24:$V0,32:[1,257],33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},o($VD,[2,92]),o($VD,[2,89]),{19:65,24:$Vq,26:258,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{20:[1,259]},{34:[1,260]},{20:[1,261],34:$VE,35:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},{30:[1,262],36:$V21},o($VD,[2,38],{41:265,39:[1,264]}),o($V31,[2,41]),o($VD,[2,85]),o($VD,[2,78]),{34:$VE,35:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR,69:[1,266]},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,21:267,22:88,23:17,24:$V0,33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,22:145,23:17,24:$V0,32:[2,84],33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,21:268,22:88,23:17,24:$V0,33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,21:269,22:88,23:17,24:$V0,33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},o($VD,[2,91]),{28:[1,270],34:$VE,35:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},o($VT,[2,34]),{23:271,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},o($VT,[2,106]),{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,21:272,22:88,23:17,24:$V0,33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{37:[1,273]},{30:[1,274],36:$V21},o($V31,[2,40]),o($V41,[2,83],{23:17,22:88,19:89,7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,21:275,24:$V0,33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh}),o($V41,[2,81],{23:17,19:89,7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,22:145,24:$V0,33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh}),{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,22:145,23:17,24:$V0,32:[1,276],33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,22:145,23:17,24:$V0,32:[1,277],33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{20:[1,278]},{35:[1,279]},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,22:145,23:17,24:$V0,32:[1,280],33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{19:65,24:$Vq,26:281,37:$Vr,45:$Vs,56:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,21:282,22:88,23:17,24:$V0,33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},o($V41,[2,82],{23:17,19:89,7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,22:145,24:$V0,33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh}),o($VD,[2,87]),o($VD,[2,88]),o($VT,[2,33]),{20:[1,283]},o($VD,[2,37]),{34:$VE,35:$VF,38:[1,284],44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP,54:$VQ,55:$VR},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,22:145,23:17,24:$V0,32:[1,285],33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},o($VT,[2,35]),{30:[1,286]},o($VD,[2,39]),{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,21:287,22:88,23:17,24:$V0,33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},{7:90,8:91,9:92,10:93,11:94,12:95,13:96,14:97,15:98,16:99,17:100,19:89,22:145,23:17,24:$V0,32:[1,288],33:$V1,36:$V2,65:$V4,71:$V5,72:$V6,73:$V7,75:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh},o($V31,[2,42])],
defaultActions: {36:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 93;
break;
case 4:return 94;
break;
case 5:return 95;
break;
case 6:return 96;
break;
case 7:return 97;
break;
case 8:return 36;
break;
case 9:return 39;
break;
case 10:return 65;
break;
case 11:return 68;
break;
case 12:return 70;
break;
case 13:return 79;
break;
case 14:return 72;
break;
case 15:return 73;
break;
case 16:return 71;
break;
case 17:return 76;
break;
case 18:return 77;
break;
case 19:return 78;
break;
case 20:return 75;
break;
case 21:return 63;
break;
case 22:return 64;
break;
case 23:return 29;
break;
case 24:return 83;
break;
case 25:return 33;
break;
case 26:return 85;
break;
case 27:return 86;
break;
case 28:return 87;
break;
case 29:return 88;
break;
case 30:return 89;
break;
case 31:return 90;
break;
case 32:return 91;
break;
case 33:return 92;
break;
case 34:return 42;
break;
case 35:return 57;
break;
case 36:return 58;
break;
case 37:return 52;
break;
case 38:return 53;
break;
case 39:return 54;
break;
case 40:return 55;
break;
case 41:return 34;
break;
case 42:return 35;
break;
case 43:return 44;
break;
case 44:return 45;
break;
case 45:return 46;
break;
case 46:return 47;
break;
case 47:return 49;
break;
case 48:return 48;
break;
case 49:return 25
break;
case 50:return 50;
break;
case 51:return 51;
break;
case 52:return 56;
break;
case 53:return 'salto';
break;
case 54:return 'barrainv';
break;
case 55:return 'comilladoble';
break;
case 56:return 'tabulacion';
break;
case 57:return 'comillasimple'
break;
case 58:return 43;
break;
case 59:return 20;
break;
case 60:return 69;
break;
case 61:return 81;
break;
case 62:return 30;
break;
case 63:return 32;
break;
case 64:return 37;
break;
case 65:return 38;
break;
case 66:return 27;
break;
case 67:return 28;
break;
case 68:return 82;
break;
case 69: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 59; 
break;
case 70: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 62; 
break;
case 71:return 60;
break;
case 72:return 61;
break;
case 73:return 24;
break;
case 74:return 5;
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:print\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:add\b)/i,/^(?:list\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:exec\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\\n)/i,/^(?:\\\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:\\')/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\?)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:"[^\"]*")/i,/^(?:'[^\"]?')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizadorSin;
exports.Parser = analizadorSin.Parser;
exports.parse = function () { return analizadorSin.parse.apply(analizadorSin, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}